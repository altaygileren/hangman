{"version":3,"sources":["components/spinner/spinner.loading.js","components/signup/signup.js","components/layout/welcome.back.js","components/alphabet/alphabet.js","components/layout/wrong.letters.js","components/layout/previous.solved.js","components/layout/hidden.word.js","components/layout/unsolved.words.js","components/user.info/user.info.js","utils/index.js","App.js","serviceWorker.js","index.js"],"names":["Spinnerloading","className","Spinner","animation","role","Signup","userName","handleChange","userInput","userNameSubmitted","userSubmittedInfo","value","name","onChange","placeholder","Button","disabled","onClick","variant","Welcomeback","Alphabetcomp","alphabet","letterClicked","amountOfTries","Row","map","x","Col","lg","Wrongletters","wrongSelected","Previoussolved","previousWords","length","i","key","Hiddenword","hiddenWord","Unsolvedwords","unsolvedWords","Userinfo","randomWord","userData","userKey","localStorage","getItem","JSON","parse","words","getUnsolvedWords","App","startGame","a","dictionaryWord","randomWords","dashInput","setTimeout","user","previousSolved","unsolvedWord","setState","loading","componentDidMount","event","target","letter","state","includes","fillLetter","wrongSelection","checkGame","gameOver","winGame","setItem","stringify","setWords","alert","setWrongWords","word","push","setUser","wordsSolved","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7e2b71d.chunk.js","sourcesContent":["import React from 'react'\nimport { Spinner } from 'react-bootstrap';\nimport './spinner.loading.css';\n\nexport default function Spinnerloading() {\n  return (\n    <div className=\"spinner-loading-div\">\n      <Spinner className=\"spinnerLoading\" animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Row, Col, Button } from 'react-bootstrap';\n\nexport default function Signup({\n  userName,\n  userInput,\n  handleChange,\n  userNameSubmitted,\n  userSubmittedInfo\n}) {\n  return (\n    <div>\n      <h1>What is your name?</h1>\n      <input\n        value={userName}\n        name='userName'\n        onChange={handleChange}\n        placeholder=\"Please type your name\"\n      />\n      <br />\n      <Button\n        disabled={userSubmittedInfo}\n        onClick={userNameSubmitted}\n        variant={'primary'}\n      >Hi there</Button>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Welcomeback({ userName }) {\n  return (\n    <div>\n      <h1>Let's get ready to play, {userName}!</h1>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap';\nimport './alphabet.styles.css';\n\n\nexport default function Alphabetcomp({\n  alphabet,\n  letterClicked,\n  amountOfTries\n}) {\n  return (\n    <div>\n      <Row>\n        {\n          alphabet.map(x => (\n            <Col lg={1}>\n              <button className=\"letterBtn\" onClick={() => letterClicked(x)}>{x}</button>\n            </Col>\n          ))\n        }\n      </Row>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nexport default function Wrongletters({ wrongSelected }) {\n  return (\n    <div>\n      <h1>Wrong selected letters</h1>\n      <Row>\n        {\n          wrongSelected.map(x => (\n            <Col lg={1}>{x}</Col>\n          ))\n        }\n      </Row>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Previoussolved({ previousWords }) {\n  return (\n    <div>\n      <h1>Solved words</h1>\n      {\n        previousWords !== null && previousWords.length > 0 ? (\n          <div>\n            {\n              previousWords.map((x, i) => (\n                <div key={i}>\n                  {x}\n                </div>\n              ))\n            }\n          </div>\n        ) : (null)\n      }\n    </div>\n  )\n}\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap';\n\nexport default function Hiddenword({ hiddenWord, amountOfTries }) {\n  return (\n    <div>\n      <h3>You have {amountOfTries} tries</h3>\n      {\n        hiddenWord.map((x, i) => (\n          <span className=\"underline-span\">\n            {x}\n          </span>\n        ))\n      }\n    </div>\n  )\n}\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap';\n\nexport default function Unsolvedwords({ unsolvedWords }) {\n  return (\n    <div>\n      <h1>Unsolved words</h1>\n      {\n        unsolvedWords.map(x => (\n          <div>\n            {x}\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n","import React from 'react'\nimport Signup from '../signup/signup';\nimport Welcomeback from '../layout/welcome.back';\nimport { Row, Col } from 'react-bootstrap';\nimport Alphabetcomp from '../alphabet/alphabet';\nimport Wrongletters from '../layout/wrong.letters';\nimport Previoussolved from '../layout/previous.solved';\nimport Hiddenword from '../layout/hidden.word';\nimport Unsolvedwords from '../layout/unsolved.words';\n\nexport default function Userinfo({\n  userName,\n  handleChange,\n  userNameSubmitted,\n  userSubmittedInfo,\n  randomWord,\n  hiddenWord,\n  alphabet,\n  letterClicked,\n  wrongSelected,\n  previousWords,\n  unsolvedWords,\n  amountOfTries\n}) {\n  return userSubmittedInfo ? (\n    <div>\n      <Welcomeback userName={userName} />\n      {/* {randomWord} */}\n      <br />\n      <Hiddenword hiddenWord={hiddenWord} amountOfTries={amountOfTries} />\n      <Alphabetcomp\n        alphabet={alphabet}\n        letterClicked={letterClicked}\n        amountOfTries={amountOfTries}\n      />\n      {wrongSelected.length > 0 ? (<Wrongletters wrongSelected={wrongSelected} />) : null}\n      <Row>\n        <Col lg={6}>\n          <Previoussolved previousWords={previousWords} />\n        </Col>\n        <Col lg={6}>\n          <Unsolvedwords unsolvedWords={unsolvedWords} />\n        </Col>\n      </Row>\n      <br />\n    </div>\n  )\n    :\n    <Signup\n      userName={userName}\n      handleChange={handleChange}\n      userNameSubmitted={userNameSubmitted}\n    />\n}\n","import axios from 'axios';\nlet SOLVED_WORDS = 'words';\nlet USERNAME = 'username';\nlet UNSOLVED_WORDS = 'unsolved_words';\n\n// Return user name\nexport const userData = (userKey = USERNAME) => {\n  if (localStorage && localStorage.getItem(userKey)) {\n    return JSON.parse(localStorage.getItem(userKey));\n  }\n  return null;\n}\n// Set username\nexport const setUser = (value, userName = USERNAME) => {\n  if (localStorage) {\n    localStorage.setItem(userName, JSON.stringify(value));\n  }\n}\n\n\n// Set users words\nexport const setWords = (value, words = SOLVED_WORDS) => {\n  if (localStorage) {\n    localStorage.setItem(words, JSON.stringify(value));\n  }\n};\n// Return all previous words solved\nexport const previousWords = (words = SOLVED_WORDS) => {\n  if (localStorage && localStorage.getItem(words)) {\n    return JSON.parse(localStorage.getItem(words));\n  }\n}\n\n\n// Get all unsolved words\nexport const getUnsolvedWords = (words = UNSOLVED_WORDS) => {\n  if (localStorage && localStorage.getItem(words)) {\n    return JSON.parse(localStorage.getItem(words));\n  }\n}\n// Set unsolved words\nexport const setWrongWords = (value, words = UNSOLVED_WORDS) => {\n  if (localStorage) {\n    localStorage.setItem(words, JSON.stringify(value));\n  }\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Spinnerloading from \"./components/spinner/spinner.loading\";\nimport Userinfo from \"./components/user.info/user.info\";\nimport {\n  setUser,\n  userData,\n  previousWords,\n  setWords,\n  getUnsolvedWords,\n  setWrongWords,\n} from \"./utils/index\";\nimport randomWords from \"random-words\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userName: \"\",\n      loading: true,\n      userSubmittedInfo: false,\n      randomWord: \"\",\n      wordsSolved: [],\n      hiddenWord: [],\n      wrongSelected: [],\n      alphabet: [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n      ],\n      previousWords: [],\n      unsolvedWords: [],\n      amountOfTries: 0,\n    };\n  }\n\n  startGame = async () => {\n    const dictionaryWord = randomWords();\n    this.dashInput(dictionaryWord);\n    setTimeout(() => {\n      const user = userData() ? userData() : \"\";\n      const previousSolved = previousWords() ? previousWords() : null;\n      const unsolvedWord = getUnsolvedWords() ? getUnsolvedWords() : null;\n      this.setState({\n        loading: false,\n        userName: user,\n        userSubmittedInfo: user ? true : false,\n        randomWord: dictionaryWord,\n        previousWords: previousSolved ? previousSolved : [],\n        unsolvedWords: unsolvedWord ? unsolvedWord : [],\n        amountOfTries: dictionaryWord.length,\n      });\n    }, 100);\n  };\n\n  componentDidMount = () => {\n    this.startGame();\n  };\n\n  handleChange = (event) => {\n    let { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  letterClicked = (letter) => {\n    let { randomWord } = this.state;\n    randomWord.includes(letter)\n      ? this.fillLetter(letter)\n      : this.wrongSelection(letter);\n  };\n\n  wrongSelection = (letter) => {\n    let { wrongSelected, amountOfTries } = this.state;\n    this.setState(\n      {\n        wrongSelected: [...wrongSelected, letter],\n        amountOfTries: amountOfTries - 1,\n      },\n      () => this.checkGame()\n    );\n  };\n\n  fillLetter = (letter) => {\n    let { randomWord, hiddenWord } = this.state;\n    for (let i = 0; i < randomWord.length; i++) {\n      if (randomWord[i] === letter) {\n        hiddenWord[i] = letter;\n        this.setState({ hiddenWord: hiddenWord });\n      }\n    }\n    this.checkGame();\n  };\n\n  checkGame = () => {\n    if (this.state.amountOfTries < 1) {\n      this.gameOver();\n    } else if (!this.state.hiddenWord.includes(\"_\")) {\n      this.winGame();\n    }\n  };\n\n  winGame = () => {\n    const { randomWord } = this.state;\n    setTimeout(() => {\n      this.setState(\n        {\n          previousWords: [...this.state.previousWords, randomWord],\n          hiddenWord: [],\n        },\n        () => setWords(this.state.previousWords)\n      );\n    }, 1000);\n    this.startGame();\n  };\n\n  gameOver = () => {\n    let { unsolvedWords, randomWord } = this.state;\n    if (!unsolvedWords.includes(randomWord)) {\n      alert(\"Game over you lost\");\n      setTimeout(() => {\n        this.setState(\n          {\n            unsolvedWords: [...unsolvedWords, randomWord],\n            amountOfTries: 0,\n            hiddenWord: [],\n            wrongSelected: [],\n          },\n          () => setWrongWords(this.state.unsolvedWords)\n        );\n      }, 100);\n      this.startGame();\n    }\n  };\n\n  dashInput = (word) => {\n    if (this.state.hiddenWord.length < 0) {\n      this.setState({ hiddenWord: [] });\n    }\n    for (let i = 0; i < word.length; i++) this.state.hiddenWord.push(\"_\");\n  };\n\n  userNameSubmitted = () => {\n    let { userName } = this.state;\n    this.setState({ userSubmittedInfo: true, userName: userName }, () =>\n      setUser(userName)\n    );\n  };\n\n  render() {\n    let {\n      userName,\n      alphabet,\n      hiddenWord,\n      userSubmittedInfo,\n      randomWord,\n      wrongSelected,\n      previousWords,\n      unsolvedWords,\n      amountOfTries,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        {this.state.loading ? (\n          <Spinnerloading />\n        ) : (\n          <Userinfo\n            userNameSubmitted={this.userNameSubmitted}\n            handleChange={this.handleChange}\n            userName={userName}\n            userSubmittedInfo={userSubmittedInfo}\n            randomWord={randomWord}\n            hiddenWord={hiddenWord}\n            alphabet={alphabet}\n            letterClicked={this.letterClicked}\n            wrongSelected={wrongSelected}\n            previousWords={previousWords}\n            unsolvedWords={unsolvedWords}\n            amountOfTries={amountOfTries}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}